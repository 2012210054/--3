import xlrd3
import xlwt3
import os
import tkinter.messagebox as tkMessagebox
#本程序基于python3以及xlrd3和xlwt3模块建立，请在使用本程序前安装对应的模块


#注意：
#请把学生姓名写在(A,1)单元格
#请把学生学号写在(B,1)单元格

#如果按照sheetidflag进行拼接，则将sheetidflag置为1，否则置0
sheetidflag=1
#如果按照sheetnameflag进行拼接，则将sheetnameflag置为1，否则置0
sheetnameflag=0
#表单id，当sheetidflag=1时起作用
sheetid=0
#表单名称，当sheetnameflag=1时起作用
sheetname="Sheet1"
#科目所在的列标
coltitle='B'
#科目类别所在的列标
colcate='D'
#学分所在的列标
colmark='C'
#总评分所在的列标
colvalue='H'
#有效数据开始的行号
rowwork=3
#最后要得到的工作簿的名称
newfile="成绩统计结果.xls"
#最后要得到的工作表的名称
newsheet="Sheet1"

def getColnum(colvalue,rowvalue):
    """
    函数名：getColnum
    输入： colvalue        #单元格的列表
                rowvalue        #单元格的行号
                ('A','3')
    输出：(0,2)
    功能：把单元格地址变成序号
    """
    dataX=int(rowvalue)-1
    if len(str(colvalue))==1:
        dataY=ord(colvalue)-65
    elif len(str(colvalue))==2:
        st=str(colvalue)[0]
        nd=str(colvalue)[1]
        stint=ord(st)-64
        ndint=ord(nd)-65
        dataY=stint*26+ndint
    return(dataY,dataX)

def buildTuple():
    """
    函数名：buildTuple
    输入：无
    输出：((科目名,学分,类别),(科目名,学分,类别))
    功能：读取所有的科目，建立科目元组
    """
    global sheetid
    global sheetidflag
    global sheetname
    global sheetnameflag
    global rowwork
    global coltitle
    global colmark
    global colcate
    filelist=list(os.walk(os.getcwd()))[0][2]
    aimfiles=list(filter(lambda n:n[-3:]=='xls',filelist))
    subls=set()
    #检查参数正确性
    if sheetnameflag not in [1,0] or sheetidflag not in [1,0] or sheetnameflag==sheetidflag:
        tkMessagebox.showinfo("消息","错误！程序参数有误！请检查程序参数。")
    for everyfile in aimfiles:
        data=xlrd3.open_workbook(everyfile)
        if sheetidflag==1:
            table = data.sheet_by_index(sheetid) 
        else:
            table = data.sheet_by_name(sheetname) 
        titlecell=getColnum(coltitle,rowwork)
        markcell=getColnum(colmark,rowwork)
        catecell=getColnum(colcate,rowwork)
        #得到科目名和学分列
        titlels=table.col_values(titlecell[0])
        markls=table.col_values(markcell[0])
        catels=table.col_values(catecell[0])
        #去掉无用行
        titlels=titlels[int(rowwork)-1:]
        markls=markls[int(rowwork)-1:]
        catels=catels[int(rowwork)-1:]
        #建立科目元组序列
        templs=set(list(map(lambda x,y,z:(x,y,z),titlels,markls,catels)))
        subls=subls|templs
    #返回元组，便于操作
    return tuple(subls)

def buildDict():
    """
    函数名：buildDict
    输入：无
    输出：{科目名:学分,科目名:学分}
    功能：通过科目元组，建立科目字典
    """
    subdict={}
    subtuple=buildTuple()
    for i in subtuple:
        subdict[i[0]]=(i[1],i[2])
    return subdict

class Student:
    def __init__(self,name,id,Adict,Bdict):
        """
        函数名：__init__
        输入： name    #学生姓名
                    id          #学生学号
                    Adict   #非公选课的成绩
                    Bdict   #公选课的成绩
        输出：学生对象
        功能：通过成绩单生成学生对象
        """ 
        self.name=name
        self.id=id
        self.Adict=Adict
        self.Bdict=Bdict
    
def getGrade():
    """
    函数名：getGrade
    输入：无
    输出：学生对象列表
    功能：通过成绩单生成学生对象列表
    """ 
    global sheetid
    global sheetidflag
    global sheetname
    global sheetnameflag
    global rowwork
    global coltitle
    global colvalue
    filelist=list(os.walk(os.getcwd()))[0][2]
    aimfiles=list(filter(lambda n:n[-3:]=='xls',filelist))
    #检查参数正确性
    if sheetnameflag not in [1,0] or sheetidflag not in [1,0] or sheetnameflag==sheetidflag:
        tkMessagebox.showinfo("消息","错误！程序参数有误！请检查程序参数。")
    stuls=[]
    subdict=buildDict()
    for everyfile in aimfiles:
        data=xlrd3.open_workbook(everyfile)
        if sheetidflag==1:
            table = data.sheet_by_index(sheetid) 
        else:
            table = data.sheet_by_name(sheetname) 
        stuname=table.cell_value(0,0)#学生姓名
        stuid=table.cell_value(0,1)#学生学号
        adict={}#非公选课
        bdict={}#公选课
        titlecell=getColnum(coltitle,rowwork)
        valuecell=getColnum(colvalue,rowwork)
        #得到科目名和学分列
        titlels=table.col_values(titlecell[0])
        valuels=table.col_values(valuecell[0])
        #去掉无用行
        titlels=titlels[int(rowwork)-1:]
        valuels=valuels[int(rowwork)-1:]
        templs=list(map(lambda x,y:(x,y),titlels,valuels))
        for i in templs:
            if subdict[i[0]][1]=='公共选修课':
                bdict[i[0]]=i[1]
            else:
                adict[i[0]]=i[1]
        stemp=Student(stuname,stuid,adict,bdict)
        stuls.append(stemp)
    return stuls[:]

#填表格
def fillBlank():
    """
    函数名：fillBlank
    输入：无
    输出：学生对象列表
    功能：通过成绩单生成学生对象列表
    """ 
    global newfile
    global newsheet
    filexls=xlwt3.Workbook()
    table = filexls.add_sheet(newsheet,cell_overwrite_ok=True)
    #添加列标
    subdict=buildDict()
    subnamels=tuple(subdict.keys())#科目名称元组，避免改变顺序
    table.write(0,0,"姓名")
    table.write(0,1,"学号")
    table.write(0,2,"平均学分绩")
    table.write(0,3,"非公选课加权平均分")
    table.write(0,4,"非公选课加权平均分")
	
	
	
    col=3
    for i in subnamels:
        table.write(0,col,i)
        col=col+1
    stuls=getGrade()
    for i in stuls:
        #添加姓名和学号
        table.write(stuls.index(i)+1,0,i.name)
        table.write(stuls.index(i)+1,1,i.id)
        #添加成绩 
        stuadict=i.Adict
        stubdict=i.Bdict
        notgx=0#非公选课成绩
        notgxxf=0#非公选课学分			
		notgxxp=0#非公选课的加权平均分	
		
		gx=0#公选课成绩
        gxxf=0#公选课学分		
		gxxp=0#公选课的加权平均分		
		
        nextposi=3#表格位置
        for iii in subnamels:
            if iii in stuadict.keys(): 
                table.write(stuls.index(i)+1,nextposi,stuadict[iii])
                notgx=notgx+stuadict[iii]*subdict[iii][0]#累计非公选课成绩
                notgxxf=notgxxf+subdict[iii][0]#累计非公选课学分				
                nextposi=nextposi+1#下一门课
            elif iii in stubdict.keys():
                table.write(stuls.index(i)+1,nextposi,stubdict[iii])
                gx=gx+stubdict[iii]*subdict[iii][0]#累计公选课成绩
                gxxf=gxxf+subdict[iii][0]#累计公选课学分
                nextposi=nextposi+1#下一门课
            else:
                table.write(stuls.index(i)+1,nextposi,0)#不存在的课补0
                nextposi=nextposi+1#下一门课
        
		
		notgxxp=notgx/notgxxf#累计非公选课的加权平均分
		gxxp=gx/gxxf#累计公选课的加权平均分		
		allgrade=notgxxp+gxxp*0.005
		
        table.write(stuls.index(i)+1,2,allgrade)
        table.write(stuls.index(i)+1,3,notgxxp)
        table.write(stuls.index(i)+1,4,gxxp)
		
    filexls.save(newfile)

def main():
    fillBlank()
main()
